package provider

import (
	"testing"

	"github.com/cachepump/cachepump/cache"
)

func TestStatic_IsEmpty(t *testing.T) {
	type fields struct {
		Value string
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		{
			name:   "Empty file provider",
			fields: fields{Value: ""},
			want:   true,
		},
		{
			name:   "No empty file provider",
			fields: fields{Value: "123"},
			want:   false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := Static{
				Value: tt.fields.Value,
			}
			if got := s.IsEmpty(); got != tt.want {
				t.Errorf("Static.IsEmpty() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestStatic_Pump(t *testing.T) {
	type fields struct {
		Value string
	}
	type args struct {
		name string
	}
	tests := []struct {
		name           string
		fields         fields
		args           args
		wantCacheValue []byte
		wantCacheErr   bool
	}{
		{
			name:           "Target value",
			fields:         fields{Value: "123 static 123"},
			args:           args{name: "static"},
			wantCacheValue: []byte("123 static 123"),
			wantCacheErr:   false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := Static{
				Value: tt.fields.Value,
			}
			fn := s.Pump(tt.args.name)
			fn()
			value, err := cache.Get(tt.args.name)
			if (err != nil) != tt.wantCacheErr {
				t.Errorf("Job function generated by Static.Pump() returns error = %v", err)
			}
			if string(value) != string(tt.wantCacheValue) {
				t.Errorf("Job function generated by Static.Pump() returns value = %s, want = %s", value, tt.wantCacheValue)
			}
		})
	}
}
